1. no getting normal references to the insides of an AST, ever. because if the AST is suddenly immuted and you're left holding a non-immut reference, you are boned
2. immut references are ok? in that case, we might as well just load the values out, instead of bothering with immutness.
3. there's a lock over the AST, so that we know when it can't be changed.
3. we can always load from an AST.
4. we can't always store into an AST.
5. when we try to store into an AST, and we don't change the tag, it would be good if the AST could be kept the same way.
	if we do change the tag, we know that we must have a lock. since we have a lock anyway, why not embed the dynamic pointer directly, as its pair of values, so it's a single indirection?
		since we can only copy anyways. does this result in funky mechanics?
	also, we can keep ASTs in place, and change them in place.
	this is fine for ASTs, but not for dynamic pointers, because it prevents references to the interior

with an AST, the first number must be fixed.
	if we don't let the user set the first integer, that's fine too though.

problem with pointer_to_AST: is that we can't exactly have ownership.
for example, if we want to create an AST, we pass in a dynamic type. but can we really create a reference to that type as an AST?
	generally, no. so we'd have to make a new copy.

benefit of pointer_to_AST: variable size.
%the compilation function knows it can just immute the AST. otherwise, it would need to create a copy
%AST pointers do need to be pointers when used. we can only compile full objects. so we'd have to make full objects eventually; it's good to bake the fullness into the type.


in our AST structure, the pointers point backwards, because forward makes them impossible to construct. (otherwise, we could use a dynamic concatenation).
	however, analyzing such ASTs is virtually impossible. for example, my generate_IR function has so many different returns.
	it's far better to start at the beginning, and then build up information from there. that's how everything works, including math.
in that case, maybe it is better to have a vector basic block.
	+no first pointer
	+can jump to the first element in the basic block, without needing to burn through finiteness
	+no need for a special command to get the previous BB element.
	---lack of linked list means that inserting instructions in the middle is ridiculous. for example, my compile_IR function would be totally unmodifiable.
Types are different because there's no reason to modify them in the middle.



if we get an element from an AST. we should receive a pointer_to_AST, for example if we request previous_AST, and should not receive a dynamic object.
	because if we don't, we'll have to return a dynamic object. and that will be even worse than testing if our AST is nullptr.
thus, any time we have a pointer_to_AST, we have to remember to check if it's nullptr.

when creating ASTs, we better be able to create null ASTs.
	for example, the previous pointer should be null.
we want to create an AST, which needs to create a previous_AST, which needs to create an AST, etc. infinite turtles.
	and we can't let 0 override the type system, because the type system is compile time and 0 is run time.
	thus: the previous_AST field can take a null object. it's special. this lets us build the nullptr AST using the 0 tag.
	for the others, if you want null ASTs, you have to build them using 0.
the problem is that this will force the AST creation into two paths: one with an object and one without. the turtles will have to eventually stop somewhere. that's probably fine: we have a branch statement, with one of the branches creating nullptr AST (the end turtle), and the other branch creating a legit AST.

I think the problem with convert_to_AST is that we shouldn't have a backup plan. return null on failure instead?
	because forcing the user to handle failure isn't always possible. the user has no reliable way to create ASTs anyway.
	for example, consider a function that returns an AST. unless it stores a backup plan in a dynamic object, it has no way to guarantee that it can actually create this AST, and thus the function cannot be compiled.
	and requiring the storage of a dynamic object has severe bootstrap problems.

we need: passthrough AST, since our dynamic objects can't change types.
does this mean we also need a passthrough Type? but both of these are actually already possible, using concatenate() in Type or AST.


problem: user probably wants locks on AST pointers, so he can mess with them and prevent anyone else from looking at them.
	atomic operations on AST pointers is not enough.
	but since AST pointers are baked in, this isn't possible.
	well, he can make concatenate() and then scope some comment objects.

we can't abuse the AST pointer by making it also function as a lock, because that means that copying the pointer may not always give the correct value.


so we're trying to move ASTs to be dynamic...the problem is that AST_info needs to be constexpr. will variable-memory lengths work with our constexpr?


I think: maybe the pointer should be the one templated to the lock. not the actual contents.
	because: we work with pointers all the time. not with the object.
	however, having the pointer be templated will cause trouble when trying to construct the object.

we're probably going to have 3 things:
uASTs, for users. can have loops and pathological behavior.
AST, for us. is immut, unique, behaves nicely. degenerates to uAST cleanly.

if ASTs are always immut, that will result in an absolute shitload of copying whenever you want to change even the smallest things.
that's impossible. and especially impossible for goto().

maybe we do unique ASTs. so ASTs in a special region are locked forever.
+never have to put locks on them. so no lock-checking either.
	however, we need to return meaningful error messages. so compilation would have to return pointers to the original ASTs.
-furthermore, we'd have to make a lot of copies of ASTs, by remembering each AST as we read it. we'd have to copy the AST as it is compiled, in order to prevent race conditions.
	and things like function parameters still seem to be part of the function type...
+you know exactly when an AST is writable or not. no corner case failures.
	however, in normal operation: if you're trying to modify an arbitrary function, you want to copy the ASTs. all semantics are the same.
		-cost of copying
	if you are trying to modify a local function, you want to reuse. is it really possible for the implementation to guarantee an unimmuting?
		as long as you don't pass the newly-compiled function to another function, you know that you hold the only reference. this guarantees the immuting.
		passing is the only problem. even running the function doesn't cause any problems.
static variables are fine either way, since they're pointers.
costs:
Locks
	lock check whenever writing/reading
		++bonus: can replace ASTs in-place.
	lock memory
	on compilation, immut chain, and then unimmut chain on un-compilation
	NOTE: with our new single-threaded system, locks are now super cheap. no need for atomicity or barriers at all.
Copying
	on compilation, copy, and then clear-mem on un-compilation.
		++bonus: can compile two versions, then compare them. well, maybe not necessarily so amazing, since your version is gone.
Benchmarks:
	https://stackoverflow.com/questions/2538070/atomic-operation-cost 310 cycles for atomic operation, 2 per AST.
		except not anymore!!
	https://stackoverflow.com/questions/7612292/how-bad-it-is-to-keep-calling-malloc-and-free 408 cycles for malloc/free combo. only one necessary; "malloc" a bunch of memory at once.
	On quad core laptop with 4GB of memory glibc can do roughly 1.5 million malloc/free pairs per second.
	On a crappy ARM board with a single core glibc can do 300 000 malloc/free pairs per second.
maybe the "get AST" function produces the complete copy automatically? no, sometimes (in the far future) you just want to look.

garbage collection:
suppose a function becomes un-compiled. is it actually possible to unimmut all references in a way that's useful?
	not really, if you're trying to modify an arbitrary function.
but if you're touching a function you just made, it's incredibly useful to be able to modify it.


how to actually run a function dynamically? the return type will be killer. must we really create a shim function?
	and then, the shim function makes the return type dynamic?
	and then, we'll have a failure branch.

perhaps: in some cases, you're allowed to jump to non-labels. for example, [compile [AST_create ...]]. if the AST creation fails, you can jump to the second branch of the compile.
	however, the error object won't be there, or something.


but maybe ASTs are semi dynamic. you pass them around, call them dynamically. for example, normally compile_AST would return either an error object or an AST pointer, in a dynamic object.
but then, call_dynamic() wouldn't be able to know that the target type was an AST pointer. otherwise, it would be guaranteed to succeed.
the downside is that we can't pass around function pointers with static types, and then call them freely. but we never could do that anyway, because of finiteness.

maybe compile_AST always returns an AST pointer, but the AST pointer might be null?
	here, we're exploiting the fact that it's semi-dynamic already

since ASTs/types/functions/dynamics are pointers, we need a way to copy their targets. since we can't just load them.

ASTs don't specify their return/parameter types, because then there's no way to manipulate them. you can't load them from dynamic pointers. it's impossible to get references to them.
it's impossible to say, "I have an AST", because any time you want to change an object, you need to know its type.