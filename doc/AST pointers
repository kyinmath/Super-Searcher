1. no getting normal references to the insides of an AST, ever. because if the AST is suddenly immuted and you're left holding a non-immut reference, you are boned
2. immut references are ok? in that case, we might as well just load the values out, instead of bothering with immutness.
3. there's a lock over the AST, so that we know when it can't be changed.
3. we can always load from an AST.
4. we can't always store into an AST.
5. when we try to store into an AST, and we don't change the tag, it would be good if the AST could be kept the same way.
	if we do change the tag, we know that we must have a lock. since we have a lock anyway, why not embed the dynamic pointer directly, as its pair of values, so it's a single indirection?
		since we can only copy anyways. does this result in funky mechanics?
	also, we can keep ASTs in place, and change them in place.
	this is fine for ASTs, but not for dynamic pointers, because it prevents references to the interior

with an AST, the first number must be fixed.
	if we don't let the user set the first integer, that's fine too though.

problem with pointer_to_AST: is that we can't exactly have ownership.
for example, if we want to create an AST, we pass in a dynamic type. but can we really create a reference to that type as an AST?
	generally, no. so we'd have to make a new copy.

benefit of pointer_to_AST: the compilation function knows it can just immute the AST. otherwise, it would need to create a copy
AST pointers do need to be pointers when used. we can only compile full objects. so we'd have to make full objects eventually; it's good to bake the fullness into the type.



if we get an element from an AST. we should receive a pointer_to_AST, for example if we request previous_AST, and should not receive a dynamic object.
	because if we don't, we'll have to return a dynamic object. and that will be even worse than testing if our AST is nullptr.
thus, any time we have a pointer_to_AST, we have to remember to check if it's nullptr.

when creating ASTs, we better be able to create null ASTs.
	for example, the previous pointer should be null.
we want to create an AST, which needs to create a previous_AST, which needs to create an AST, etc. infinite turtles.
	and we can't let 0 override the type system, because the type system is compile time and 0 is run time.
	thus: the previous_AST field can take a null object. it's special. this lets us build the nullptr AST using the 0 tag.
	for the others, if you want null ASTs, you have to build them using 0.
the problem is that this will force the AST creation into two paths: one with an object and one without. the turtles will have to eventually stop somewhere. that's probably fine: we have a branch statement, with one of the branches creating nullptr AST (the end turtle), and the other branch creating a legit AST.


the AST pointer is not actually a pointer, because it owns the AST. no free copies; you need a deep copy.
	the reason for this is to allow for immut ASTs. if the pointer is immut, then the AST is immut.
	but then you won't even be able to look at the AST because you can't get a pointer to it.


we need: passthrough AST, since our dynamic objects can't change types.
does this mean we also need a passthrough Type? but both of these are actually already possible, using concatenate() in Type or AST.


problem: user probably wants locks on AST pointers, so he can mess with them and prevent anyone else from looking at them.
	atomic operations on AST pointers is not enough.
	but since AST pointers are baked in, this isn't possible.
	well, he can make concatenate() and then scope some comment objects.

we can't abuse the AST pointer by making it also function as a lock, because that means that copying the pointer may not always give the correct value.


so we're trying to move ASTs to be dynamic...the problem is that AST_info needs to be constexpr. will variable-memory lengths work with our constexpr?


I think: maybe the pointer should be the one templated to the lock. not the actual contents.
	because: we work with pointers all the time. not with the object.
	however, having the pointer be templated will cause trouble when trying to construct the object.

we're probably going to have 3 things:
uASTs, for users. can have loops and pathological behavior.
AST, for us. is immut, unique, behaves nicely. degenerates to uAST cleanly.

if ASTs are always immut, that will result in an absolute shitload of copying whenever you want to change even the smallest things.
that's impossible. and especially impossible for goto().

maybe we do unique ASTs. so ASTs in a special region are locked forever.
this means we never have to put locks on them.
	however, we need to return meaningful error messages. so compilation would have to return pointers to the original ASTs.
	furthermore, we'd have to make a lot of copies of ASTs, by remembering each AST as we read it. we'd have to copy the AST as it is compiled, in order to prevent race conditions.
	and things like function parameters still seem to be part of the function type...
big bonus: you know exactly when an AST is writable or not. no corner case failures.

garbage collection:
suppose a function becomes un-compiled. is it actually possible to unimmut all references in a way that's useful?
	not really, if you're trying to modify an arbitrary function.
but if you're touching a function you just made, it's incredibly useful to be able to modify it.
