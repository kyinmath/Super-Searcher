[concatenate [imv 1] [imv 2]] [imv 3]
	still causes extra cast
[concatenate [imv 1] [imv 2]]
	causes a ridiculous amount of GEPs
	in the case of concatenate, stack_degree 2, there's no point in RVO into an existing slot. because you have to load it out from the slot anyway, one at a time.


[concatenate [concatenate [integer] [integer]] [integer]]
[concatenate [integer] [concatenate [integer] [integer]]]
	why isn't this working? middle is not 0
[concatenate [concatenate [concatenate [integer] [integer]] [integer]] [integer]]
	this works.


[convert_to_AST [random] [scope] [dynamic]]
	usually ought to fail. random > highest possible tag
[convert_to_AST [integer 7] [scope] [dynamic]]
	should produce a [random] AST






//for single size object. 0 and non-0 offset
[dynamify]empty [imv 0]ret [imv 40]a [dyn_subobj [dynamify [pointer a]]dyn [imv 0] [store [pointer ret] [copy subobj]] [store [pointer empty] [copy subobj]]]subobj [copy ret]
	returns 40, as it should
[dynamify]empty [imv 0]ret [imv 40]a [dyn_subobj [dynamify [pointer a]]dyn [imv 1] [store [pointer ret] [copy subobj]] [store [pointer empty] [copy subobj]]]subobj [copy empty]
	empty = nothing, as it should. but maybe we should test the type instead of copying empty
//for concatenate object. 0 and non-0 offset
[dynamify]empty [imv 0]ret [concatenate [imv 40]in [pointer in]]a [dyn_subobj [dynamify [pointer a]]dyn [imv 0] [store [pointer ret] [copy subobj]] [label] [label] [label] [label] [store [pointer empty] [copy subobj]]]subobj [copy ret]
[dynamify]empty [imv 0]ret [concatenate [imv 40]in [pointer in]]a [dyn_subobj [dynamify [pointer a]]dyn [imv 1] [store [pointer ret] [copy subobj]] [label] [label] [label] [label] [store [pointer empty] [copy subobj]]]subobj [copy empty]
	this is returning empty, which is wrong.
	why does %1 have size 4?

//tests moving objects to higher lifetimes. a pointer to in gets stored to p, so the concatenation better stay alive.
[imv 30]dummy [pointer dummy]p [concatenate [imv 40]in [store [pointer p] [pointer in]]]a [increment [copy p]]


[dynamify]empty [imv 0]ret [concatenate [imv 40]in [pointer in]]a [copy [load_subobj [pointer a] [imv 1]]]