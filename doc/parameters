compile(): needs to know return type and parameter type.
it can figure out the return type from the function.
let's try: parameters are given by the ASTs "[load_parameter Type*]".
	so then compile() goes through the function and looks for these, then acquires a vector of AST*. then it imposes an arbitrary ordering, and puts them in a vector
	essentially a naming system? but not, because there's no information here.
at least, it makes no sense to specify function parameters separately from where they're used, in a separate list. it makes every bit of sense to put them directly in their appropriate places.
user must also be able to control the order of the parameters, since he'll want to recompile. (does that screw up our desire to point to the ASTs, since the ASTs might change?)
	so we can't do somehting like order-by-address.
but if we look at them from hteir position in the AST, then goto() might cause a parameter to be skipped over once, then reappear in a different spot and change the order.

the thing is, we're trying to avoid duplication at the moment, between specifying info one time in the ASTs, and then another time in the function parameter list.




PERHAPS: function parameters are literally set inside the calling function!
	that is, the function with the parameter has the AST load.
	but then, the calling function stores into those ASTs.
	and the function type says, "I require these ASTs to be set".
this turns function calls into named parameters.
editing functions is ok, because those things generally don't have further ASTs (they don't depend on anything). the problem is: how do we attach comments to them? and these comments should be editable, even after the function is compiled.
	maybe they can just be dynamic pointers. you can copy them. but then how do you change the type of the dynamic object? overwrite() is going to have to succeed.

we're using globals right now for parameters, but those will be slow. even using the stack, like golang does, is slow.