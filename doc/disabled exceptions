returning to exceptions


if functions can fail, then users have to keep track of it, assign numbers, and everything. what's more, you can still have arbitrarily long threads.
	how about: we force a function to terminate

the main difference is that on failure, you simply panic and throw an exception, instead of handling things gracefully.
that means that when calling a function, you don't need to care about the failure case: you'll just panic.
	but then the problem is that we'll have trouble crossing function boundaries.

+error recovery code doesn't have to be littered everywhere in user's code.
	but then, ADMIN has to handle that crap, which involves either a mess of exception handling, or a mess of extra return values.
we can pass in an integer to the thread AST, telling it what the error code of the previous function was.
	there's no point in registering two ASTs, since that will require an extra indirection. better to let the single AST see it.

