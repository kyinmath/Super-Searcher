How is country competition going to work?
	this requires single point of contact. for example, controlling a machine, or competing against other countries.
	but King has problems with single-point-of-failure. and isolation of knowledge - he's the only one who knows how to do things.
		unfortunately, having only a single king around means he has no competition to improve himself. if the other subusers in a country want a better king, it's hard, because nobody else has experience with kingship.

		
		
is it reasonable to expose scores?
	that is, communication might lead to party systems (like in Congress, open votes led to open corruption)
the plus side is that it's possible to correct out-of-control voters. well, is it really? will the user have any real ability to detect poor voting? no, I think it's impossible.
	well, it's possible to detect when a user goes haywire. but subtle changes are not possible. in subjective, multi-faceted organizations, it's really not possible.
is it possible to prevent collusion? to a significant degree, the answer is yes. because it's hard for a user to prove his cooperation in a collusion scheme.

discarded:
Vote submission, User#, weighted vector of all users. given out AFTER the vote ends. automatically normalized, sum to 2^32.
	starting user: punish any coalitions.
	randomly identify as coalitions those groups that favor their own members to a much greater degree than the general population. since this is averaged over time, we should keep track over time, to prevent swinging votes.
	so, after voting: randomly choose a few subsets of the population (probabilistically). then rate their self-benefits relative to the rest of the group, and make a score.
		if it's high, then test again by testing the removal of a single user, and test the addition of a single user. then, remember the highest colluders.
		more collusion = more punishment.
	winner replaces the loser.
	then, inside their heads, each user docks winner's score by some amount.
		will this automatically lead to collusion? for example, if we have two parties, each sees the other colluding.
yes, automatically. users will vote for their close relatives.
	preventing this would be severely complicated. essentially, you'd have to weight their votes so that they derived no benefit from nepotism. this is really hard and strange, and forces a lot of thinking.

the idea of a king is looking pretty good.
	king will kill everyone upon winning the (random) election. then, he'll have no conflict of interest.
	rather, the king should probably be the oldest living guy, since he's most likely to be stable.
and then, we'll have revolution.
I think, interaction is not in the king's process space, because the king can crash.
	instead, everyone communicates with the admin, who then communicates with the king.


voting start doesn't decay. although this can lead to unexpected votes in the middle of something, it can also be good in preventing repeated re-votes.
	for now, it's painful to require everyone to remember to start the vote. let's just require 1/3 of the users to want to start for the vote to actually start.
