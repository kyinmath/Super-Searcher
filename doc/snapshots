snapshot absolutely should use the existing GC mechanism. otherwise there will be tons of bugs.

snapshotting:
start with a set of base objects. (we have a set of base objects, because we'll use this to copy users as well).
then, run the GC. except each time we find an object using found_living_object, we copy it over to a new allocation.
	then, we keep a map from old locations to new locations.
mark_single(), whenever it finds a pointer, searches the map for the old location, and then changes it to the new location.
	if it fails to find the old location in the map, it errors. this is because mark_single() should recursively mark its targets before it tries to search the map.

note: we have to handle functions in a special way.
and, we must add types to a unique type map whenever we see them. or, if we're snapshotting from a user to himself, we can just avoid copying the types, since they're immutable.


serialization and unserialization:
	grab ASTs from functions. then recompile at time of unserialization.
	reconstruct the Tptr hash table at time of unserialization.
snapshotting:
	copy functions. then recompile.
	don't copy types or do anything with them.
GC:
	no relocations necessary. only need a set, not a map.
	warning: types need large numbers, bigger than never_reached. and, nothing is allowed to exist at 0.

the difference is what to do on finding a pointer to:
1. normal object
	GC: put in set.
	snapshot: map, relocate (copy).
2. function
	GC: mark specially.
	snapshot: map, relocate in special place (copy), remember all functions for later recompilation.
3. Tptr
	GC: put in set.
	snapshot: do nothing.

problem: when unserializing, we have to create the new types. however, we can't get unique types, or any other types.
idea: to serialize, simply copy memory directly into a file, along with the function pool locations. then, when unserializing, shift the function pointers as necessary. then recompile.

fork(): fix the IPC area. give your ID to the admin...but even then, can the admin see you?
reseed the RNG