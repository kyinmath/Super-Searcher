Type information is mostly in "types.h".

our base object is an uint64. all objects have sizes as integer multiples of this base object.
to get the size of an object, take the number of bits and divide by 64.
thus, we designate a uint64 as having size "1". two uint64s stuck to each other have size "2". etc.

llvm needs types too. however, we won't preserve any type information. thus:
	for an object of size 1, its llvm-type is an integer
	for an object of size >=2, the llvm-type is an array of integers, corresponding to its size.

When running generate_IR(), each return value has both a llvm type and our internal type (Type).
For objects that are on the stack, their llvm type gets an extra *. That is, they become pointers to a memory location that contains the object. Dereferencing is required to acquire the actual object.
But for internal types, we have the option to either represent the type of a stack object as a pointer to the type, or as the actual type. So a uint64_t on the stack may be either ["cheap pointer", ["integer"]] or just ["integer"].
Either way, we'll have to do a transparent conversion from the llvm type when using the "pointer" AST and the "copy" AST, so that the user doesn't need to worry about whether the target AST is on the stack or not. The user does not care about llvm's internal semantics.
Cons of storing the type with a pointer:
	you create an extra pointer. if the type is not used, you've wasted time creating an extra type object.
Cons of storing the actual type:
	every time you use a "pointer" AST, you have to create another pointer type.
Decision: our internal type system doesn't create an extra pointer for stack objects. 
	#our type system represents our conceptual understanding, so that debugging works well.
	#if we ever want a "get type of AST return object" AST, then it will work directly. the return type should not be context dependent on some other ASTs you can't see.