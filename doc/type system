for internal types, we have the option to either represent the type of a stack object as a pointer to the type, or as the actual type. So a uint64_t on the stack may be either ["cheap pointer", ["integer"]] or just ["integer"].
Either way, we'll have to do a transparent conversion from the llvm type when using the "pointer" AST and the "copy" AST, so that the user doesn't need to worry about whether the target AST is on the stack or not. The user does not care about llvm's internal semantics.
Cons of storing the type with a pointer:
	you create an extra pointer. if the type is not used, you've wasted time creating an extra type object.
	when trying to Store values, you'll have to get get rid of this extra pointer to type_check.
	when trying to Load values, you'll have to get rid of the extra pointer as well.
Cons of storing the actual type:
	every time you use a "pointer" AST, you have to create another pointer type.
Decision: our internal type system doesn't create an extra pointer for stack objects. 
	#our type system represents our conceptual understanding, so that debugging works well.
	#if we ever want a "get type of AST return object" AST, then it will work directly. the return type should not be context dependent on some other ASTs you can't see.

implicit conversion is good because it allows for subtraction, which gives equality testing.




current problem: Types now only have further types as subfields.
and with ASTs, the "integer" AST is obsolete because of the dynamic static object AST, which provides a better static object.

so, the only subfield that isn't an AST pointer is the static object AST. how do we handle this?
	is it possible that "static object" will forever be the only AST not using AST pointers?
	what about something like offset of pointer? this will need a fixed, compile-time integer, right? otherwise, we can't get a guaranteed type, which will lead to excessive checking ASTs.
	idea: we can leave it up to the optimizer to check that the thing is compile-time fixed and guaranteed to succeed.

second problem: with dynamic objects, AST pointers, type pointers, copying is not easy.
	we need an explicit copy command now. I guess that's "load".