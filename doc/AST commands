note: break, and return, are basically goto...
	the difference is that with goto, you aren't returning an object. but that's easily fixed.
	

()reverse_concatenate for constructing out of order
()sizeof Type, which counts the memory it occupies. maybe we should also have a version that counts other overhead.
	this is what's used to find the size of a normal dynamic object
()return, which does an early return
()get system values(int), returns int:
	= # of AST tags
	= finiteness
	= number of users
	= working size memory
	= system clock
	= my user ID inside the country (unique)
	= country ID (unique)
	= number of countries
()get system values(int, int)
	= # of AST fields for tag N
	%= AES encode
	%= AES decode
	we never return type tags, because user doesn't need to know them.
()action command(int, int)
	= print to console
	= delegation N. king chooses a guy to become the new king. should probably require some confirmation.
	= steal. if you're not doing so well, then maybe you should kill yourself and become a copy of your brother country.
()action command(int)
	= GC schedule
()acquire message (gives user_ID + vector of integers)
()send message (user_ID, vector_of_integers). (ID is -1 for admin, 0 for king, 1-N for user)

admin messages:
	user start (modify random judgment. if you're the king (looking at your user ID), then do something else as well (modify king judgment).
	user crash. this is handled automatically. copy the oldest user with the furthest ancestor from the crashed user. and send a message to the king telling him which user was copied.

should king running/user running use different event functions? if not, then you'll have to manually check your ID, then branch.

new message (user, size, some objects. used for country competition as well.)
	the naive purpose of choosing event-loop functions based on the current event is for efficiency. we're checking for events anyway in our main loop, so we might as well pass in the information, right? but the cost is remembering a whole new function.
	but binding the iteration-speed of event-reading to the event-loop timing is a pretty bad idea. sometimes you want multiple events, such as if you're streaming information.

__dynamic object
()append-in-place only. fails if no space.
()Truncate(X). going down to X.
()change_reserved_memory
()get_reserved_memory_size()


how much RAM does the system support

for eventual running, we'd give the user a shell in a virtual machine, on a different physical machine for isolation, security, and increased computing power at the cost of latency.
Virtual machines are not to be trusted, because they are insufficiently tested.
	and later, we'd even give the user a mouse, keyboard, and screen.

user identification, using public/private keys.
Revolution: threshold, 1 to N-1, that when reached, kills the king. Should be invisible to the king.