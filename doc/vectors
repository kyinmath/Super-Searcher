a vector is good in general. simple long-chain types are not that good, because they require constant type checks.

with long-chain types, you must make a new type every single time you add (since types are immutable)
	although...if we can guarantee that vector types are always private, so one dynamic object <=> one private type, and disallow copying types, then that will be awesome.
	and it'll be invisible to the user as well.
		this will also allow invisible spying on additions to the vector. that's good, but are there downsides?
		ASTs might occasionally embed dynamic pointers using double indirection (dynamic to dynamic, thus storing the second dynamic as fixed), and in that case it's mostly fine.



		
having all objects size 1 makes get_size fast, which is very good for dynamic objects, since you have to get the Nth element. so instead of checking 1-N, you can just check N. O(N) to O(1). even though every dynamic pointer type check has an extra indirection, it also loses an indirection from not needing to read the type.
	is there another advantage? originally, when we wanted this, we were trying to allow for expansion. but memory issues disallow easy expansion.
dynamic pointer concatenation = disabled.
vector = pointer to std::vector<uint64_t>. stores size, and reserved size. the purpose of storing reserved size is to allow for concatenation. if you want fixed size, use dynamic pointer instead.
	advantage: guaranteed modification once the type is known
	advantage: pushback (which is necessary), and popback (which is also necessary)

for now, if we only allow one object per vector, we can pass in a constantint, specifying the size.


vectors have serious bootstrapping issues. this is important for AST creation.
we're fixing this by using typeof(). and then, we allow for convert_to_AST to take a null third field, which means that all fields should be null.

in practice, the loss of information from having only vectors, instead of arbitrary variadics, is pretty low.
	I never needed it in C++. and you can have a vector of dynamic pointers anyway.
	the plus side is that the type info is very short. so vectors are a very common use case.