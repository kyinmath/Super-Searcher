so, escape analysis:
as we get pointers floating around, we track the memory_allocations they point to.
	if ever we require the target lifetime to be larger than is possible, for example if we store a pointer to it as a global, then we force the target lifetime to be full.
		this is simply determined by checking the memory_allocation when it goes out of scope. if there are still pointers to it, it is forced to become full.
then, we force the return object and memory_location to become full, by ReplaceInstWithInst on the memory_location, and then forcing upwards the self_lifetime and target_lifetime of the target.


problem: loops work with pointer targeting?
suppose we have pointers A, B. memory locations C, D.
B points to C. then B is stored in A; A points to C.
then B is changed to point to D, and then we loop.
	now, the problem is that in the loop, A will be changed to point to D as well.

so when a pointer A is copied into another pointer B, we can't just copy the lifetimes. B has to remember a pointer to A's unordered set.
	when A goes out of scope, its references must all be spilled into B.
	this can be placed into A's destructor. right now, the destructor simply decreases references. we should force it to spill before dropping all its references.


http://lists.cs.uiuc.edu/pipermail/llvmdev/2010-July/033013.html:
That depends what you mean by "escape". The LLVM concept of 'capture' 
means, "did the pointer outlive the function call?" We use this in an 
interprocedural context, for example, you can call strlen() with a 
pointer and rest assured that no copies of the pointer were made.

While this is useless for malloc elimination in the general case (you 
care whether the callee might call free() not just whether it makes a 
copy) in your case with no explicit frees I think it's probably 
equivalent. The API is in include/llvm/Analysis/CaptureTracking.h, and 
link to libAnalysis.
	so llvm can do escape analysis for us. however, we'd have to somehow let llvm know that certain constants are global addresses.

escape analysis is not easy. thus, we'll just do it very primitively, and not bother with much.
	any time you take a pointer to an allocation, that allocation is assumed to be captured, and should be moved to the heap.



our old escape analysis actually cost 20% run time! holy crap!
our escape analysis was really prone to bugs. every case had to be considered. things like dynamic_conc were ridiculous.












we're having trouble tracking the ReturnInfo as it moves around. that means we can't really have a callback to it from the memory location.
that's actually probably fine. no callbacks. they probably don't give speedups anyway.

how do we guarantee tha the memory location won't fall off the stack before we get a chance to make it full?
for example, compile() exposes a temporary return object. and maybe do_after has the same issue.

idea: when the memory location is about to fall off the stack, check how many references it still hsa. if it's >= 1, then make it full instead.
that means we don't have track lifetimes. instead, we track reference counts
problem: references will be left with dangling pointers

problem: we can't handle references well. because their ctors and dtors don't yet know about the "objects" uAST to return_info mapper.
well, maybe we can just add in a pointer to <>objects, to Return_Info


Idea: automatic pass-through of references.
	however, if() doesn't use the automatic function generation.
	and store() wants a different mechanism.
	and add() doesn't want to pass through references (although it doesn't matter)


how does store() work with escape analysis?
	we don't necessarily know where all the possible memory_location targets of the pointer are; we only know where the possibly-non-full memory_locations.
	however, we must still guarantee that if we're writing a pointer into the memory location, the memory_location must gain a reference

the thing is, with both full and maybe-full references, we're going to have toruble passing through information. super verbose.
	we could add the info to the AST_descriptor[]. then, the 
and, with full pointers from load_object, do full references really work?












new strategy: split out memory_location into memory_allocation and memory_location.
	the memory_allocation possesses the actual alloca.
	memory_location is passed around, and has a pointer to the allocation.
	since there's a pointer, we don't need to worry about passing information up and down.

so, the new problem is that memory_location might die. in that case, we better find any memory_location with a pointer to it, and delete that pointer.
	but back-references face problems since the unordered_map relocates.
new solution: memory_locations are kept alive by the compiler_object, in a deque.
	then, each memory_location has a flag which says, "I'm dead", or "I'm alive".


do references belong with ReturnInfo, or with memory_allocation?
	they belong with the actual final object.

how it works now:
	references are handled by finish(), whenever desired points to a memory allocation
	otherwise, if desired = 0, you have to handle references manually.
	that is, they're handled wherever they are produced.
base size is handled by if() and concatenate(), because we can't just concatenate sizes in if() branches.
	problem: how does stack_degree == 2 work then? we're constructing an integer in the bottom, and we have to figure out the type...